class StreamCall(object):
    def __init__(self,name,arguments):
        self.name = 'name'
        self.arguments = arguments
        self.keyedArguments = splitKeyed(self.arguments)
    
    def __str__(self):
        return ""

    def __repr__(self):
        return self.name + "(" + printArguments() ")" + setters()

    def isKey(self,string):
        # checks if this is a keyed value
        if isinstance(string,str):
            return string[0] == ':'
        return False

    def splitKeyed(self):
        idx = 0
        self.extra = [];
        result = [];
        iterator = iter(self.arguments)
        while(item = iterator.next()):
            if isKey(item):
                key = item[:1]
                self.extra[key] = []
                while(item = iterator.next()):
                    self.extra[key].append(item) 
                    if isKey(item):
                        key = item[:1]
                        self.extra[key] = []
                        self.extra[key].append(item)
            else result.append(item)
        self.arguments = result        

    def printArguments(self):
        return ",".join(self.arguments)

    def setters(self):
        return ""

foo = StreamCall('casper',[1,2,3,'st.rv(10,300)',':max','st.rv(100,200)'])


print(foo)